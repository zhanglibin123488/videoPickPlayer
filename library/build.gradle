import com.android.builder.core.BuilderConstants

// Copyright (C) 2016 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
apply plugin: 'com.android.library'
apply plugin: 'bintray-release'

android {
    compileSdkVersion project.ext.compileSdkVersion
    buildToolsVersion project.ext.buildToolsVersion

    defaultConfig {
        // Important: ExoPlayerLib specifies a minSdkVersion of 9 because
        // various components provided by the library may be of use on older
        // devices. However, please note that the core video playback
        // functionality provided by the library requires API level 16 or
        // greater.
        minSdkVersion 9
        targetSdkVersion project.ext.targetSdkVersion
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
        debug {
            testCoverageEnabled = true
        }
    }

    lintOptions {
        abortOnError false
    }

    sourceSets {
        androidTest {
            java.srcDirs += "../testutils/src/main/java/"
        }
    }
}

dependencies {
//    androidTestCompile 'com.google.dexmaker:dexmaker:1.2'
//    androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.2'
//    androidTestCompile 'org.mockito:mockito-core:1.9.5'
    compile 'com.android.support:support-annotations:24.2.0'
    compile 'com.android.support:support-v4:23.1.1'
    compile 'com.facebook.fresco:fresco:0.12.0'
}

android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    if (name.equals(BuilderConstants.DEBUG)) {
        return; // Skip debug builds.
    }
    def task = project.tasks.create "jar${name.capitalize()}", Jar
    task.dependsOn variant.javaCompile
    task.from variant.javaCompile.destinationDir
    artifacts.add('archives', task);
}

android.libraryVariants.all { variant ->
    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
        title = "ExoPlayer library"
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        classpath = files(variant.javaCompile.classpath.files, project.android.getBootClasspath())
        options {
            links "http://docs.oracle.com/javase/7/docs/api/"
            linksOffline "https://developer.android.com/reference","${android.sdkDirectory}/docs/reference"
            encoding = 'UTF-8'
        }
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
        doLast {
            copy {
                from "src/main/javadoc"
                into "$buildDir/docs/javadoc"
            }
        }
    }
}

publish {
    artifactId = 'exoplayer'
    description = 'The ExoPlayer library.'
    repoName = releaseRepoName
    userOrg = releaseUserOrg
    groupId = releaseGroupId
    version = releaseVersion
    website = releaseWebsite
}
